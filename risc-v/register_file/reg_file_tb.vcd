$date
	Tue Aug 27 18:32:28 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_tb $end
$var wire 32 ! rd2 [31:0] $end
$var wire 32 " rd1 [31:0] $end
$var reg 1 # clk $end
$var reg 5 $ ra1 [4:0] $end
$var reg 5 % ra2 [4:0] $end
$var reg 1 & rst $end
$var reg 5 ' wa [4:0] $end
$var reg 32 ( wd [31:0] $end
$var reg 1 ) we $end
$scope module reg_file_uut $end
$var wire 1 # clk $end
$var wire 5 * ra1 [4:0] $end
$var wire 5 + ra2 [4:0] $end
$var wire 1 & rst $end
$var wire 5 , wa [4:0] $end
$var wire 32 - wd [31:0] $end
$var wire 1 ) we $end
$var parameter 32 . wth $end
$var reg 32 / rd1 [31:0] $end
$var reg 32 0 rd2 [31:0] $end
$var reg 32 1 rg_x10_a0 [31:0] $end
$var reg 32 2 rg_x11_a1 [31:0] $end
$var reg 32 3 rg_x12_a2 [31:0] $end
$var reg 32 4 rg_x13_a3 [31:0] $end
$var reg 32 5 rg_x14_a4 [31:0] $end
$var reg 32 6 rg_x15_a5 [31:0] $end
$var reg 32 7 rg_x16_a6 [31:0] $end
$var reg 32 8 rg_x17_a7 [31:0] $end
$var reg 32 9 rg_x18_s2 [31:0] $end
$var reg 32 : rg_x19_s3 [31:0] $end
$var reg 32 ; rg_x1_ra [31:0] $end
$var reg 32 < rg_x20_s4 [31:0] $end
$var reg 32 = rg_x21_s5 [31:0] $end
$var reg 32 > rg_x22_s6 [31:0] $end
$var reg 32 ? rg_x23_s7 [31:0] $end
$var reg 32 @ rg_x24_s8 [31:0] $end
$var reg 32 A rg_x25_s9 [31:0] $end
$var reg 32 B rg_x26_s10 [31:0] $end
$var reg 32 C rg_x27_s11 [31:0] $end
$var reg 32 D rg_x28_t3 [31:0] $end
$var reg 32 E rg_x29_t4 [31:0] $end
$var reg 32 F rg_x2_sp [31:0] $end
$var reg 32 G rg_x30_t5 [31:0] $end
$var reg 32 H rg_x31_t6 [31:0] $end
$var reg 32 I rg_x3_gp [31:0] $end
$var reg 32 J rg_x4_tp [31:0] $end
$var reg 32 K rg_x5_t0 [31:0] $end
$var reg 32 L rg_x6_t1 [31:0] $end
$var reg 32 M rg_x7_t2 [31:0] $end
$var reg 32 N rg_x8_s0 [31:0] $end
$var reg 32 O rg_x9_s1 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 .
$end
#0
$dumpvars
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
b0 0
b0 /
b0 -
b0 ,
b0 +
b0 *
0)
b0 (
b0 '
1&
b0 %
b0 $
0#
b0 "
b0 !
$end
#5000
b0 H
b0 G
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 F
b0 ;
1#
#10000
0#
b10010001101000101011001111000 (
b10010001101000101011001111000 -
b1 '
b1 ,
1)
0&
#15000
b10010001101000101011001111000 ;
1#
#20000
0#
b10000111011001010100001100100001 (
b10000111011001010100001100100001 -
b10 '
b10 ,
#25000
b10000111011001010100001100100001 F
1#
#30000
b10000111011001010100001100100001 !
b10000111011001010100001100100001 0
b10010001101000101011001111000 "
b10010001101000101011001111000 /
0#
b10 %
b10 +
b1 $
b1 *
0)
#35000
1#
#40000
0#
1&
#45000
b0 !
b0 0
b0 "
b0 /
b0 F
b0 ;
1#
#50000
0#
0&
#55000
1#
#60000
0#
