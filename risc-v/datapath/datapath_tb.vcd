$date
	Sun Nov 17 18:53:42 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath_tb $end
$var wire 32 ! pc_out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 32 $ write_data [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 1 ' reg_write $end
$var wire 32 ( reg_data2 [31:0] $end
$var wire 32 ) reg_data1 [31:0] $end
$var wire 5 * rd [4:0] $end
$var wire 32 + pc_plus_4 [31:0] $end
$var wire 32 , pc_out [31:0] $end
$var wire 7 - opcode [6:0] $end
$var wire 32 . next_pc [31:0] $end
$var wire 1 / mem_write $end
$var wire 1 0 mem_to_reg $end
$var wire 1 1 mem_read $end
$var wire 32 2 mem_data [31:0] $end
$var wire 1 3 jump $end
$var wire 32 4 instruction [31:0] $end
$var wire 32 5 imm_out [31:0] $end
$var wire 7 6 funct7 [6:0] $end
$var wire 3 7 funct3 [2:0] $end
$var wire 32 8 csr_data [31:0] $end
$var wire 32 9 branch_target [31:0] $end
$var wire 1 : branch $end
$var wire 1 ; alu_zero $end
$var wire 1 < alu_src $end
$var wire 32 = alu_result [31:0] $end
$var wire 3 > alu_op [2:0] $end
$var wire 32 ? alu_in2 [31:0] $end
$scope module alu_mux $end
$var wire 32 @ sal [31:0] $end
$var wire 1 < sel $end
$var wire 32 A e2 [31:0] $end
$var wire 32 B e1 [31:0] $end
$var reg 32 C aux [31:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 1 " clk $end
$var wire 32 D in_b [31:0] $end
$var wire 4 E op [3:0] $end
$var wire 1 # rst $end
$var wire 32 F in_a [31:0] $end
$var reg 32 G out_s [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 H res [31:0] $end
$var wire 32 I op2 [31:0] $end
$var wire 32 J op1 [31:0] $end
$upscope $end
$scope module csr_unit $end
$var wire 1 " clk $end
$var wire 12 K csr_addr [11:0] $end
$var wire 1 L csr_read $end
$var wire 1 M csr_write $end
$var wire 1 # rst $end
$var wire 32 N csr_write_data [31:0] $end
$var parameter 12 O MCAUSE $end
$var parameter 12 P MEPC $end
$var parameter 12 Q MSTATUS $end
$var parameter 12 R MTVEC $end
$var reg 32 S csr_read_data [31:0] $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope module ctrl $end
$var wire 3 U funct3 [2:0] $end
$var wire 7 V funct7 [6:0] $end
$var wire 7 W opcode [6:0] $end
$var wire 1 ; zero $end
$var reg 3 X alu_op [2:0] $end
$var reg 1 < alu_src $end
$var reg 1 : branch $end
$var reg 1 3 jump $end
$var reg 1 1 mem_read $end
$var reg 1 0 mem_to_reg $end
$var reg 1 / mem_write $end
$var reg 1 ' reg_write $end
$upscope $end
$scope module data_memory $end
$var wire 32 Y address [31:0] $end
$var wire 1 " clk $end
$var wire 1 1 mem_read $end
$var wire 1 / mem_write $end
$var wire 32 Z write_data [31:0] $end
$var parameter 32 [ MEM_SIZE $end
$var reg 32 \ read_data [31:0] $end
$upscope $end
$scope module data_or_alu $end
$var wire 32 ] e1 [31:0] $end
$var wire 32 ^ e2 [31:0] $end
$var wire 32 _ sal [31:0] $end
$var wire 1 0 sel $end
$var reg 32 ` aux [31:0] $end
$upscope $end
$scope module imm_generator $end
$var wire 3 a imm_sel [2:0] $end
$var wire 32 b instr [31:0] $end
$var reg 32 c imm_out [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 d addr [31:0] $end
$var parameter 32 e ROM_ADDR_BITS $end
$var parameter 32 f ROM_WIDTH $end
$var reg 32 g instruction [31:0] $end
$upscope $end
$scope module pc_increment $end
$var wire 32 h op2 [31:0] $end
$var wire 32 i res [31:0] $end
$var wire 32 j op1 [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 k e1 [31:0] $end
$var wire 32 l e2 [31:0] $end
$var wire 32 m e4 [31:0] $end
$var wire 32 n sal [31:0] $end
$var wire 2 o sel [1:0] $end
$var wire 32 p e3 [31:0] $end
$var reg 32 q aux [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 " clk $end
$var wire 1 r en $end
$var wire 32 s next_pc [31:0] $end
$var wire 1 # rst $end
$var parameter 32 t RESET_PC_VALUE $end
$var reg 32 u pc_out [31:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 " clk $end
$var wire 5 v ra1 [4:0] $end
$var wire 5 w ra2 [4:0] $end
$var wire 1 # rst $end
$var wire 5 x wa [4:0] $end
$var wire 32 y wd [31:0] $end
$var wire 1 ' we $end
$var parameter 32 z wth $end
$var reg 32 { rd1 [31:0] $end
$var reg 32 | rd2 [31:0] $end
$var reg 32 } rg_x10_a0 [31:0] $end
$var reg 32 ~ rg_x11_a1 [31:0] $end
$var reg 32 !" rg_x12_a2 [31:0] $end
$var reg 32 "" rg_x13_a3 [31:0] $end
$var reg 32 #" rg_x14_a4 [31:0] $end
$var reg 32 $" rg_x15_a5 [31:0] $end
$var reg 32 %" rg_x16_a6 [31:0] $end
$var reg 32 &" rg_x17_a7 [31:0] $end
$var reg 32 '" rg_x18_s2 [31:0] $end
$var reg 32 (" rg_x19_s3 [31:0] $end
$var reg 32 )" rg_x1_ra [31:0] $end
$var reg 32 *" rg_x20_s4 [31:0] $end
$var reg 32 +" rg_x21_s5 [31:0] $end
$var reg 32 ," rg_x22_s6 [31:0] $end
$var reg 32 -" rg_x23_s7 [31:0] $end
$var reg 32 ." rg_x24_s8 [31:0] $end
$var reg 32 /" rg_x25_s9 [31:0] $end
$var reg 32 0" rg_x26_s10 [31:0] $end
$var reg 32 1" rg_x27_s11 [31:0] $end
$var reg 32 2" rg_x28_t3 [31:0] $end
$var reg 32 3" rg_x29_t4 [31:0] $end
$var reg 32 4" rg_x2_sp [31:0] $end
$var reg 32 5" rg_x30_t5 [31:0] $end
$var reg 32 6" rg_x31_t6 [31:0] $end
$var reg 32 7" rg_x3_gp [31:0] $end
$var reg 32 8" rg_x4_tp [31:0] $end
$var reg 32 9" rg_x5_t0 [31:0] $end
$var reg 32 :" rg_x6_t1 [31:0] $end
$var reg 32 ;" rg_x7_t2 [31:0] $end
$var reg 32 <" rg_x8_s0 [31:0] $end
$var reg 32 =" rg_x9_s1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 z
b0 t
b100000 f
b1000 e
b100000000 [
b1100000101 R
b1100000000 Q
b1101000001 P
b1101000010 O
$end
#0
$dumpvars
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
b0 |
b0 {
bx y
b1011 x
b0 w
b0 v
b0 u
b100 s
1r
b100 q
b0 p
b0 o
b100 n
b0 m
b10000000000 l
b100 k
b0 j
b100 i
b100 h
b1000000000000000000010110010011 g
b0 d
b10000000000 c
b1000000000000000000010110010011 b
b0 a
bx `
bx _
b0 ^
bx ]
b0 \
b0 Z
bx Y
b0 X
b10011 W
b100000 V
b0 U
b1000000000000 T
b0 S
b0 N
0M
1L
b10000000000 K
b0 J
b10000000000 I
b10000000000 H
bx G
b0 F
b0 E
b10000000000 D
b10000000000 C
b0 B
b10000000000 A
b10000000000 @
b10000000000 ?
b0 >
bx =
1<
x;
0:
b10000000000 9
b0 8
b0 7
b100000 6
b10000000000 5
b1000000000000000000010110010011 4
03
b0 2
01
00
0/
b100 .
b10011 -
b0 ,
b100 +
b1011 *
b0 )
b0 (
1'
b0 &
b0 %
bx $
1#
0"
b0 !
$end
#5
b0 $
b0 _
b0 y
b0 `
1;
b0 =
b0 G
b0 Y
b0 ]
b0 6"
b0 5"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 4"
b0 )"
b1000000000000 T
1"
#10
0"
#15
b1000000000000 T
1"
#20
0"
0#
#25
b1011 &
b1011 v
b1000 .
b1000 n
b1000 s
b1000 q
b1000000000001011000010110010011 4
b1000000000001011000010110010011 b
b1000000000001011000010110010011 g
b1000 +
b1000 i
b1000 k
b10000000100 9
b10000000100 H
b10000000100 l
b100 !
b100 ,
b100 J
b100 d
b100 j
b100 u
b10000000000 $
b10000000000 _
b10000000000 y
b10000000000 `
0;
b10000000000 =
b10000000000 G
b10000000000 Y
b10000000000 ]
1"
#30
0"
#35
b10000000000 )
b10000000000 F
b10000000000 N
b10000000000 p
b10000000000 {
bx $
bx _
bx y
bx `
bx 2
bx \
bx ^
10
11
1<
1'
b10000 ?
b10000 @
b10000 D
b10000 C
b10100 K
b10100 %
b10100 w
b10000 *
b10000 x
b0 6
b0 V
b10 7
b10 U
b10 a
b11 -
b11 W
b10000 5
b10000 A
b10000 I
b10000 c
b1100 .
b1100 n
b1100 s
b1100 q
b1010001011010100000000011 4
b1010001011010100000000011 b
b1010001011010100000000011 g
b10000000000 ~
b1100 +
b1100 i
b1100 k
b11000 9
b11000 H
b11000 l
b1000 !
b1000 ,
b1000 J
b1000 d
b1000 j
b1000 u
1"
#40
0"
#45
bx )
bx F
bx N
bx p
bx {
b10000010000 $
b10000010000 _
b10000010000 y
b10000010000 `
b0 2
b0 \
b0 ^
b1 E
b1 >
b1 X
1:
00
01
0<
0'
b0 ?
b0 @
b0 D
b0 C
b111111100000 K
b0 %
b0 w
b10000 &
b10000 v
b11101 *
b11101 x
b1111111 6
b1111111 V
b0 7
b0 U
b0 a
b1100011 -
b1100011 W
b11111111111111111111111111100000 5
b11111111111111111111111111100000 A
b11111111111111111111111111100000 I
b11111111111111111111111111100000 c
b10000 .
b10000 n
b10000 s
b10000 q
b11111110000010000000111011100011 4
b11111110000010000000111011100011 b
b11111110000010000000111011100011 g
bx %"
b10000 +
b10000 i
b10000 k
b11111111111111111111111111101100 9
b11111111111111111111111111101100 H
b11111111111111111111111111101100 l
b1100 !
b1100 ,
b1100 J
b1100 d
b1100 j
b1100 u
b10000010000 =
b10000010000 G
b10000010000 Y
b10000010000 ]
1"
#50
0"
#55
b10000000000 )
b10000000000 F
b10000000000 N
b10000000000 p
b10000000000 {
b10100 .
b10100 n
b10100 s
b10100 q
b1100 ?
b1100 @
b1100 D
b1100 C
bx 2
bx \
bx ^
1<
10
11
1'
b0 E
b0 >
b0 X
0:
b0 K
b1011 &
b1011 v
b1100 *
b1100 x
b0 6
b0 V
b10 7
b10 U
b10 a
b11 -
b11 W
b1100 5
b1100 A
b1100 I
b1100 c
b1011010011000000011 4
b1011010011000000011 b
b1011010011000000011 g
b10100 +
b10100 i
b10100 k
b11100 9
b11100 H
b11100 l
b10000 !
b10000 ,
b10000 J
b10000 d
b10000 j
b10000 u
bx $
bx _
bx y
bx `
b0 o
x;
bx =
bx G
bx Y
bx ]
1"
#60
0"
#65
b100000001100 ?
b100000001100 @
b100000001100 D
b100000001100 C
b100 K
b100 %
b100 w
b1101 *
b1101 x
b100000001100 5
b100000001100 A
b100000001100 I
b100000001100 c
b11000 .
b11000 n
b11000 s
b11000 q
b10001011010011010000011 4
b10001011010011010000011 b
b10001011010011010000011 g
bx !"
b11000 +
b11000 i
b11000 k
b100000100000 9
b100000100000 H
b100000100000 l
b10100 !
b10100 ,
b10100 J
b10100 d
b10100 j
b10100 u
0;
b10000001100 =
b10000001100 G
b10000001100 Y
b10000001100 ]
1"
#70
0"
#75
bx (
bx B
bx Z
bx |
b1110 ?
b1110 @
b1110 D
b1110 C
b1100 K
b1100 %
b1100 w
b1110 *
b1110 x
b1110 5
b1110 A
b1110 I
b1110 c
b11100 .
b11100 n
b11100 s
b11100 q
b110001011010011100000011 4
b110001011010011100000011 b
b110001011010011100000011 g
bx ""
b11100 +
b11100 i
b11100 k
b100110 9
b100110 H
b100110 l
b11000 !
b11000 ,
b11000 J
b11000 d
b11000 j
b11000 u
b110000001100 =
b110000001100 G
b110000001100 Y
b110000001100 ]
1"
#80
0"
#85
b100000001110 ?
b100000001110 @
b100000001110 D
b100000001110 C
b10000 K
b10000 %
b10000 w
b1111 *
b1111 x
b100000001110 5
b100000001110 A
b100000001110 I
b100000001110 c
b100000 .
b100000 n
b100000 s
b100000 q
b1000001011010011110000011 4
b1000001011010011110000011 b
b1000001011010011110000011 g
bx #"
b100000 +
b100000 i
b100000 k
b100000101010 9
b100000101010 H
b100000101010 l
b11100 !
b11100 ,
b11100 J
b11100 d
b11100 j
b11100 u
b10000001110 =
b10000001110 G
b10000001110 Y
b10000001110 ]
1"
#90
0"
#95
bx )
bx F
bx N
bx p
bx {
b110000001110 $
b110000001110 _
b110000001110 y
b110000001110 `
b0 2
b0 \
b0 ^
00
01
1<
1'
b11111111111111111111111111010000 ?
b11111111111111111111111111010000 @
b11111111111111111111111111010000 D
b11111111111111111111111111010000 C
b111111010000 K
b1100 &
b1100 v
b1100 *
b1100 x
b1111110 6
b1111110 V
b0 7
b0 U
b0 a
b10011 -
b10011 W
b11111111111111111111111111010000 5
b11111111111111111111111111010000 A
b11111111111111111111111111010000 I
b11111111111111111111111111010000 c
b100100 .
b100100 n
b100100 s
b100100 q
b11111101000001100000011000010011 4
b11111101000001100000011000010011 b
b11111101000001100000011000010011 g
bx $"
b100100 +
b100100 i
b100100 k
b11111111111111111111111111110000 9
b11111111111111111111111111110000 H
b11111111111111111111111111110000 l
b100000 !
b100000 ,
b100000 J
b100000 d
b100000 j
b100000 u
b110000001110 =
b110000001110 G
b110000001110 Y
b110000001110 ]
1"
#100
0"
#105
bx )
bx F
bx N
bx p
bx {
b1101 &
b1101 v
b1101 *
b1101 x
b101000 .
b101000 n
b101000 s
b101000 q
b11111101000001101000011010010011 4
b11111101000001101000011010010011 b
b11111101000001101000011010010011 g
b110000001110 !"
b101000 +
b101000 i
b101000 k
b11111111111111111111111111110100 9
b11111111111111111111111111110100 H
b11111111111111111111111111110100 l
b100100 !
b100100 ,
b100100 J
b100100 d
b100100 j
b100100 u
bx $
bx _
bx y
bx `
x;
bx =
bx G
bx Y
bx ]
1"
#110
0"
#115
b1110 &
b1110 v
b1110 *
b1110 x
b101100 .
b101100 n
b101100 s
b101100 q
b11111101000001110000011100010011 4
b11111101000001110000011100010011 b
b11111101000001110000011100010011 g
b101100 +
b101100 i
b101100 k
b11111111111111111111111111111000 9
b11111111111111111111111111111000 H
b11111111111111111111111111111000 l
b101000 !
b101000 ,
b101000 J
b101000 d
b101000 j
b101000 u
1"
#120
0"
